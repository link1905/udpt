version: "3.7"

services:
    udpt-account-django:
        build:
            context: .
            dockerfile: ./compose/production/django/Dockerfile
        image: udpt
        restart: always
        volumes:
            - type: volume
              source: udpt_media
              target: /app/media
        env_file:
            - ./.envs/.production/.django
            - ./.envs/.production/.postgres
        environment:
            - USE_ACCOUNT_APP=True
            - USE_TAG_APP=False
            - USE_FORUM_APP=False
            - DATABASE_URL_ENV_NAME=ACCOUNT_DATABASE_URL
            - ACCOUNT_SERVICE_URL=http://udpt-account-django:8000/api/
            - TAG_SERVICE_URL=http://udpt-tag-django:8000/api/
            - FORUM_SERVICE_URL=http://udpt-forum-django:8000/api/
        command: /start
        depends_on:
            udpt-postgres:
                condition: service_healthy
            udpt-redis:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
                order: stop-first

    udpt-tag-django:
        build:
            context: .
            dockerfile: ./compose/production/django/Dockerfile
        image: udpt
        restart: always
        volumes:
            - type: volume
              source: udpt_media
              target: /app/media
        env_file:
            - ./.envs/.production/.django
            - ./.envs/.production/.postgres
        environment:
            - USE_ACCOUNT_APP=False
            - USE_TAG_APP=True
            - USE_FORUM_APP=False
            - DATABASE_URL_ENV_NAME=TAG_DATABASE_URL
            - ACCOUNT_SERVICE_URL=http://udpt-account-django:8000/api/
            - TAG_SERVICE_URL=http://udpt-tag-django:8000/api/
            - FORUM_SERVICE_URL=http://udpt-forum-django:8000/api/
        command: /start
        depends_on:
            udpt-postgres:
                condition: service_healthy
            udpt-redis:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
                order: stop-first

    udpt-forum-django:
        build:
            context: .
            dockerfile: ./compose/production/django/Dockerfile
        image: udpt
        restart: always
        volumes:
            - type: volume
              source: udpt_media
              target: /app/media
        env_file:
            - ./.envs/.production/.django
            - ./.envs/.production/.postgres
        environment:
            - USE_ACCOUNT_APP=False
            - USE_TAG_APP=False
            - USE_FORUM_APP=True
            - DATABASE_URL_ENV_NAME=FORUM_DATABASE_URL
            - ACCOUNT_SERVICE_URL=http://udpt-account-django:8000/api/
            - TAG_SERVICE_URL=http://udpt-tag-django:8000/api/
            - FORUM_SERVICE_URL=http://udpt-forum-django:8000/api/
        command: /start
        depends_on:
            udpt-postgres:
                condition: service_healthy
            udpt-redis:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
                order: stop-first


    udpt-redis:
        image: redis:alpine
        restart: always
        healthcheck:
            test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
        deploy:
            mode: replicated
            replicas: 1

    udpt-postgres:
        build:
            context: .
            dockerfile: ./compose/production/postgres/Dockerfile
        image: udpt_postgres
        restart: always
        volumes:
            - type: volume
              source: udpt_db
              target: /var/lib/postgresql/data
        env_file:
            - ./.envs/.production/.postgres
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            mode: replicated
            replicas: 1

    udpt-nginx:
        build:
            context: .
            dockerfile: ./compose/production/nginx/Dockerfile
        image: udpt_nginx
        ports:
            - 80:80
        depends_on:
            udpt-account-django:
                condition: service_healthy
            udpt-tag-django:
                condition: service_healthy
            udpt-forum-django:
                condition: service_healthy
        restart: always
        deploy:
            mode: replicated
            replicas: 1

volumes:
    udpt_db:
    udpt_media:
